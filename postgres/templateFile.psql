DROP TRIGGER update_user_balances
DROP FUNCTION update_balances();
DROP TABLE transactions;
DROP TABLE users;
DROP TYPE TXN_STATUS;
DROP TYPE TXN_TYPE;
DROP TYPE ACCOUNT_STATE;
REVOKE ALL PRIVILEGES ON DATABASE bitbox FROM alexander;
DROP USER alexander;

CREATE USER alexander WITH PASSWORD 'testing123';
GRANT ALL PRIVILEGES ON DATABASE bitbox TO alexander;

CREATE TYPE TXN_STATUS AS ENUM ('Canceled', 'Pending', 'Complete');
CREATE TYPE TXN_TYPE AS ENUM ('Payment', 'Deposit', 'Withdrawal');
CREATE TYPE ACCOUNT_STATE AS ENUM ('External','Admin', 'Active', 'Disabled', 'Inactive');

CREATE TABLE users (
    id SERIAL PRIMARY KEY, 
    email VARCHAR(100) UNIQUE DEFAULT NULL,
    firstname VARCHAR(100) DEFAULT NULL, 
    lastname VARCHAR(100) DEFAULT NULL, 
    nickname VARCHAR(200) DEFAULT NULL,
    status ACCOUNT_STATE NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    facebook_id NUMERIC(20) UNIQUE DEFAULT NULL,
    balance BIGINT NOT NULL DEFAULT 0 CONSTRAINT non_negative_balance CHECK (balance >= 0)
);

CREATE TABLE transactions (
    id SERIAL PRIMARY KEY, 
    source INT NOT NULL REFERENCES users(id), 
    destination INT NOT NULL REFERENCES users(id), 
    status TXN_STATUS NOT NULL DEFAULT 'Pending',
    type TXN_TYPE NOT NULL, 
    amount BIGINT NOT NULL CONSTRAINT positive_amount CHECK (amount > 0), 
    memo VARCHAR(100),
    submitted TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

GRANT ALL PRIVILEGES ON users TO alexander;
GRANT ALL PRIVILEGES ON transactions TO alexander;

GRANT USAGE, SELECT ON SEQUENCE transactions_id_seq TO alexander;
GRANT USAGE, SELECT ON SEQUENCE users_id_seq TO alexander;

INSERT INTO users (nickname, status, facebook_id) VALUES ('Bitcoin Network', 'External', -1);

CREATE OR REPLACE FUNCTION activate_user_transactions() RETURNS TRIGGER AS $wrapper$
BEGIN
    IF (OLD.status = 'Pending' AND (NEW.status = 'Admin' OR NEW.status = 'Active')) THEN
        UPDATE transactions SET status = 'Complete' WHERE type = 'Payment' AND transactions.destination = NEW.id;
    END IF;
    RETURN NEW;
END $wrapper$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION update_balances() RETURNS TRIGGER AS $wrapper$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        RAISE EXCEPTION 'Deleting a transaction is prohibited';
    END IF;

    IF (NEW.type = 'Payment') THEN
        IF (TG_OP = 'INSERT') THEN
            IF (NEW.status = 'Pending') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source); 
            ELSEIF (NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source AND users.status != 'External');
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        ELSEIF (TG_OP = 'UPDATE') THEN
            IF (OLD.status = 'Pending' AND NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            ELSEIF (OLD.status = 'Pending' AND NEW.status = 'Canceled') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.source AND users.status != 'External');
            END IF;
        END IF;
    ELSEIF (NEW.type = 'Deposit') THEN
        IF (TG_OP = 'INSERT') THEN
            IF (NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        ELSEIF (TG_OP = 'UPDATE') THEN
            IF (OLD.status = 'Pending' AND NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        END IF;
    ELSEIF (NEW.type = 'Withdrawal') THEN
        IF (TG_OP = 'INSERT') THEN
            IF (NEW.status = 'Pending') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source); 
            END IF;
        ELSEIF (TG_OP = 'UPDATE') THEN
            IF (OLD.status = 'Pending' AND NEW.status = 'Canceled') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.source);
            END IF;
        END IF;
    END IF;
    RETURN NEW;
END $wrapper$ LANGUAGE 'plpgsql';

CREATE TRIGGER update_user_balances
BEFORE INSERT OR UPDATE OR DELETE
ON transactions
FOR EACH ROW
EXECUTE PROCEDURE update_balances();
