DROP TRIGGER activate_account ON users;
DROP TRIGGER update_user_balances ON transactions;
DROP TRIGGER log_transaction_change ON transactions;

DROP FUNCTION activate_balances();
DROP FUNCTION update_balances();
DROP FUNCTION log_transactions();

DROP TABLE transaction_logs;
DROP TABLE notifications;
DROP TABLE transactions;
DROP TABLE users;

DROP TYPE TXN_STATUS;
DROP TYPE TXN_TYPE;
DROP TYPE ACCOUNT_STATE;

REVOKE ALL PRIVILEGES ON DATABASE bitbox FROM alexander;

DROP USER alexander;

CREATE USER alexander WITH PASSWORD 'testing123';
GRANT ALL PRIVILEGES ON DATABASE bitbox TO alexander;

CREATE TYPE TXN_STATUS AS ENUM ('Canceled', 'Pending', 'Complete', 'Requested', 'Refunded', 'Declined');
CREATE TYPE TXN_TYPE AS ENUM ('Payment', 'Deposit', 'Withdrawal', 'send', 'ask');
CREATE TYPE ACCOUNT_STATE AS ENUM ('External','Admin', 'Active', 'Disabled', 'Inactive');

CREATE TABLE users (
    id SERIAL PRIMARY KEY, 
    secret VARCHAR(12) DEFAULT NULL,
    deposit_address VARCHAR(34) DEFAULT NULL,
    email VARCHAR(100) UNIQUE DEFAULT NULL,
    firstname VARCHAR(100) DEFAULT NULL, 
    lastname VARCHAR(100) DEFAULT NULL, 
    nickname VARCHAR(200) NOT NULL,
    facebookPost boolean DEFAULT false,
    status ACCOUNT_STATE NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    facebook_id NUMERIC(20) UNIQUE DEFAULT NULL,
    balance BIGINT NOT NULL DEFAULT 0 CONSTRAINT non_negative_balance CHECK (balance >= 0),
    new_notis INT DEFAULT 0
);

CREATE TABLE transactions (
    id SERIAL PRIMARY KEY, 
    source INT NOT NULL REFERENCES users(id), 
    destination INT NOT NULL REFERENCES users(id), 
    status TXN_STATUS NOT NULL DEFAULT 'Pending',
    type TXN_TYPE NOT NULL, 
    amount BIGINT NOT NULL CONSTRAINT positive_amount CHECK (amount > 0), 
    memo VARCHAR(1024),
    confirmations INT DEFAULT 0,
    blockchain_id VARCHAR(100) DEFAULT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    uuid VARCHAR(36) UNIQUE DEFAULT NULL
);  

CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    user_id SERIAL,    
    type TXN_TYPE NOT NULL,    
    msg VARCHAR(1024),
    tx_uuid VARCHAR(36) UNIQUE,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (tx_uuid) REFERENCES transactions(uuid)
);

CREATE TABLE transaction_logs (
    id SERIAL PRIMARY KEY,
    transaction_id VARCHAR(36) NOT NULL REFERENCES transactions(id),
    status TXN_STATUS NOT NULL, 
    generated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

GRANT ALL PRIVILEGES ON users TO alexander;
GRANT ALL PRIVILEGES ON transactions TO alexander;
GRANT ALL PRIVILEGES ON notifications TO alexander;
GRANT ALL PRIVILEGES ON transaction_logs TO alexander;

GRANT USAGE, SELECT ON SEQUENCE transactions_id_seq TO alexander;
GRANT USAGE, SELECT ON SEQUENCE users_id_seq TO alexander;
GRANT USAGE, SELECT ON SEQUENCE notifications_id_seq TO alexander;
GRANT USAGE, SELECT ON SEQUENCE transaction_logs_id_seq TO alexander;

INSERT INTO users (id, nickname, status) VALUES (-1, 'Bitcoin Network', 'External');

CREATE OR REPLACE FUNCTION activate_balances() RETURNS TRIGGER AS $wrapper$
BEGIN
    IF (OLD.status = 'Inactive' AND (NEW.status = 'Admin' OR NEW.status = 'Active')) THEN
        UPDATE transactions SET status = 'Complete' WHERE status = 'Pending' AND type = 'Payment' AND destination = NEW.id;
    END IF;
    RETURN NEW;
END $wrapper$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION log_transactions() RETURNS TRIGGER AS $wrapper$
BEGIN
    INSERT INTO transaction_logs (transaction_id, status) VALUES (NEW.id, NEW.status);
    RETURN NEW;
END $wrapper$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION update_balances() RETURNS TRIGGER AS $wrapper$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        RAISE EXCEPTION 'Deleting a transaction is prohibited';
    END IF;

    IF (NEW.type = 'Payment') THEN
        
        IF (TG_OP = 'INSERT') THEN
            --  If dest acct is not active
            IF (NEW.status = 'Pending') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source); 

            --  If dest acct is active
            ELSEIF (NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source); 
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        
        ELSEIF (TG_OP = 'UPDATE') THEN
            --  Dest account activation
            IF (OLD.status = 'Pending' AND NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);

            --  Dest account performs refund
            ELSEIF (OLD.status = 'Complete' AND NEW.status = 'Refunded') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.source); 
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.destination);

            --  Src account approves request
            ELSEIF (OLD.status = 'Requested' AND NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source); 
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        END IF;

    ELSEIF (NEW.type = 'Deposit') THEN
        
        IF (TG_OP = 'INSERT') THEN
            IF (NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        
        ELSEIF (TG_OP = 'UPDATE') THEN
            IF (OLD.status = 'Pending' AND NEW.status = 'Complete') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.destination);
            END IF;
        END IF;

    ELSEIF (NEW.type = 'Withdrawal') THEN
        IF (TG_OP = 'INSERT') THEN
            IF (NEW.status = 'Pending') THEN
                UPDATE users SET balance = (balance - NEW.amount) WHERE (users.id = NEW.source); 
            END IF;
        
        ELSEIF (TG_OP = 'UPDATE') THEN
            IF (OLD.status = 'Pending' AND NEW.status = 'Canceled') THEN
                UPDATE users SET balance = (balance + NEW.amount) WHERE (users.id = NEW.source);
            END IF;
        END IF;
    END IF;

    NEW.last_updated = CURRENT_TIMESTAMP;
    
    RETURN NEW;
END $wrapper$ LANGUAGE 'plpgsql';

CREATE TRIGGER update_user_balances
BEFORE INSERT OR UPDATE OR DELETE
ON transactions
FOR EACH ROW
EXECUTE PROCEDURE update_balances();

CREATE TRIGGER log_transaction_change
AFTER INSERT OR UPDATE
ON transactions
FOR EACH ROW
EXECUTE PROCEDURE log_transactions();

CREATE TRIGGER activate_account
AFTER UPDATE
ON users
FOR EACH ROW
EXECUTE PROCEDURE activate_balances();
